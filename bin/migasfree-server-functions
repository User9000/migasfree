function get_web_service
{
    service apache2 status &>/dev/null
    if [ $? = 0 ]
    then
        echo -e "apache2"
    fi

    service httpd status &>/dev/null
    if [ $? = 0 ]
    then
        echo -e "httpd"
    fi
}

function get_user_web_service
{
    ps axho user,comm | grep -E "apache2|httpd" | uniq | grep -v "root" | cut -d " " -f 1 | uniq
}

function web_service
{
    service $(get_web_service) "$1"
}

function own_web_server
{
  mkdir -p "$1" &>/dev/null || :
  chown -R $_USER_WEB_SERVICE "$1"
}

function verify_dependencies
{
    # TODO
    # apache2, libapache2-mod-wsgi, doc-utils, etc...

    which curl > /dev/null
    if [ $? -ne 0 ]
    then
        echo "Curl not found, install it and try again."
        return 1
    fi

    python -c "import django" 2> /dev/null
    if [ $? -ne 0 ]
    then
        echo "Django framework not found, install it and try again."
        return 1
    fi

    which rpm > /dev/null
    if [ $? -ne 0 ]
    then
        echo "RPM not found, install it and try again."
        return 1
    fi

    which dpkg-scanpackages > /dev/null
    if [ $? -ne 0 ]
    then
        echo "dpkg-scanpackages command not found, install it and try again."
        return 1
    fi

    which createrepo > /dev/null
    if [ $? -ne 0 ]
    then
        echo "createrepo command not found, install it and try again."
        return 1
    fi

    echo "TODO verifying more dependencies..."
}

function configure_web_app
{
    _CODE="from migasfree.server.functions import config_apache; config_apache();"
    DJANGO_SETTINGS_MODULE=migasfree.settings.production python -c "$_CODE"
    if [ $? -ne 0 ]
    then
        echo "Problem found configuring web app in server."
        return 1
    fi
}

function remove_old_data
{
    # remove old data if exists (from scratch)

    if [ "$_IS_DB_SQLITE" == 'True' ]
    then
        rm -f $_DB_NAME
    else
        _NAME=$(basename $_DB_NAME) # $_DB_NAME contains path and filename
        su - postgres -c "psql -c 'DROP DATABASE IF EXISTS $_NAME' &>/dev/null"
        su - postgres -c "createdb -E utf8 -O migasfree $_NAME"
    fi

    rm -rf $_REPO_PATH/FEDORA || :
    rm -rf $_REPO_PATH/OPENSUSE || :
    rm -rf $_REPO_PATH/UBUNTU || :
}

function set_permissions
{
    if [ "$_IS_DB_SQLITE" == 'True' ]
    then
        # owner and permissions for database
        own_web_server $_DB_PATH
        own_web_server $_DB_NAME
        chmod 600 $_DB_NAME
    fi

    # owner for repositories
    own_web_server $_REPO_PATH

    # owner for keys
    own_web_server $_KEYS_PATH
    chmod 700 $_KEYS_PATH

    # owner for migasfree.log
    touch "$_TMP_DIR/migasfree.log"
    own_web_server "$_TMP_DIR/migasfree.log"
}

function test_app
{
    # run test of migasfree
    python $_MIGASFREE_PATH/manage.py test --verbosity=2
    if [ $? -ne 0 ]
    then
        echo "Problem found running database tests."
        return 1
    fi
}

function create_server_keys
{
    service haveged start || :
    DJANGO_SETTINGS_MODULE=migasfree.settings.production python -c "from migasfree.server.security import create_keys_server; create_keys_server();"
    if [ $? -ne 0 ]
    then
        echo "Problem found creating server keys. Server not operative."
        return 1
    fi
}
