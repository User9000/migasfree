#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import pwd

import django.core.management

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "migasfree.settings")

from migasfree.server.fixtures import (
    create_registers,
    sequence_reset,
    run
)

from migasfree import settings


def create_db():
    DB = settings.DATABASES.get('default')
    if DB.get('ENGINE') == 'django.db.backends.postgresql_psycopg2':
        if not is_user_root():
            print 'You must be root to run this script'
            exit(1)

        settings.DATABASES.get('default').get('ENGINE')

        _HOST = ""
        if DB.get('HOST'):
            _HOST = " --host=%s " % DB.get('HOST')

        _PORT = ""
        if DB.get('PORT'):
            _PORT = " --port=%s " % DB.get('PORT')

        # DROP DATABASE
        cmd_linux = "echo 'DROP DATABASE %s;' | su postgres -c psql - &>/dev/null" \
            % (DB.get('NAME'))
        (out, err) = run(cmd_linux)

        # CREATE DATABASE
        cmd_linux = "su postgres -c 'PGPASSWORD=%s createdb %s %s -w -E utf8 -O %s %s'" % (
            DB.get('PASSWORD'),
            _HOST,
            _PORT,
            DB.get('USER'),
            DB.get('NAME')
        )
        (out, err) = run(cmd_linux)
    elif DB.get('ENGINE') == 'django.db.backends.sqlite3' and os.path.isfile(DB.get('NAME')):
        os.remove(DB.get('NAME'))
    else:
        exit(1, "Sorry. This backend is not supported: %s" % DB.get("ENGINE"))


def create_tables():
    """
    # why does not work in all systems?
    django.core.management.call_command(
        'syncdb',
        all=True,
        interactive=False,
        verbosity=1
    )
    """
    # workaround (hopefully temporary)
    (out, err) = run(
        'cd %s; echo no | python manage.py syncdb --all' \
            % settings.MIGASFREE_APP_DIR
    )

    django.core.management.call_command(
        'migrate',
        'server',
        verbosity=1,
        fake=True
    )

def is_user_root():
    # Check user is root
    info = pwd.getpwnam(os.environ.get('USER'))
    return (info[3] == 0)  # 3 - gid


def main():
    print "Creating Database..."
    create_db()
    create_tables()
    create_registers()
    sequence_reset()
    print "Database created: %s" % settings.DATABASES.get('default').get("NAME")

if  __name__ == '__main__':
    main()
