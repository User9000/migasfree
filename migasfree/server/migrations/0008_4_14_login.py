# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2017-03-15 08:47
from __future__ import unicode_literals

from django.db import migrations, models
from django.utils import timezone
import django.db.models.deletion

from ..functions import swap_m2m


def migrate_login_to_computer(apps, schema_editor):
    db_alias = schema_editor.connection.alias

    Computer = apps.get_model('server', 'Computer')
    Login = apps.get_model('server', 'Login')

    for login in Login.objects.using(db_alias):
        computer = Computer.objects.using(db_alias).filter(pk=login.computer_id)
        if computer:
            computer = computer[0]
            computer.sync_user = login.user
            swap_m2m(login.attributes, computer.sync_attributes)
            computer.sync_start_date = login.date
            computer.save()


class Migration(migrations.Migration):

    dependencies = [
        ('server', '0007_4_13_devices'),
    ]

    operations = [
        migrations.RunSQL(
            'SET CONSTRAINTS ALL IMMEDIATE',
            reverse_sql=migrations.RunSQL.noop
        ),
        migrations.AlterModelOptions(
            name='attributeset',
            options={
                'permissions': (('can_save_attributeset', 'Can save Attributes Set'),),
                'verbose_name': 'Attributes Set',
                'verbose_name_plural': 'Attributes Sets'
            },
        ),
        migrations.RenameField(
            model_name='computer',
            old_name='datehardware',
            new_name='last_hardware_capture',
        ),
        migrations.RenameField(
            model_name='computer',
            old_name='history_sw',
            new_name='software_history',
        ),
        migrations.RenameField(
            model_name='computer',
            old_name='software',
            new_name='software_inventory',
        ),
        migrations.RenameField(
            model_name='computer',
            old_name='dateinput',
            new_name='created_at',
        ),
        migrations.AlterField(
            model_name='computer',
            name='created_at',
            field=models.DateTimeField(
                auto_now_add=True, default=timezone.now,
                help_text='Date of entry into the migasfree system'
            ),
            preserve_default=False,
        ),
        migrations.RenameField(
            model_name='computer',
            old_name='datelastupdate',
            new_name='sync_end_date',
        ),
        migrations.AlterField(
            model_name='computer',
            name='sync_end_date',
            field=models.DateTimeField(null=True, verbose_name='sync end date'),
        ),
        migrations.AddField(
            model_name='computer',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, default=timezone.now),
            preserve_default=False,
        ),
        migrations.RenameField(
            model_name='computer',
            old_name='ip',
            new_name='ip_address',
        ),
        migrations.AlterField(
            model_name='computer',
            name='ip_address',
            field=models.CharField(blank=True, null=True, max_length=50, verbose_name='ip address'),
        ),
        migrations.AlterField(
            model_name='computer',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='tags', to='server.Attribute', verbose_name='tags'),
        ),
        migrations.AddField(
            model_name='computer',
            name='sync_attributes',
            field=models.ManyToManyField(
                blank=True, help_text='attributes sent',
                to='server.Attribute', verbose_name='sync attributes'
            ),
        ),
        migrations.AddField(
            model_name='computer',
            name='sync_start_date',
            field=models.DateTimeField(null=True, verbose_name='sync start date'),
        ),
        migrations.AddField(
            model_name='computer',
            name='sync_user',
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE,
                to='server.User', verbose_name='sync user'
            ),
        ),
        migrations.RunPython(
            migrate_login_to_computer,
            migrations.RunPython.noop
        ),
        migrations.AlterField(
            model_name='checking',
            name='code',
            field=models.TextField(
                blank=True,
                help_text="Django code. <br><b>VARIABLES TO SETTINGS:</b><br><b>result</b>: a number. If result<>0 the checking is show in the section Status. Default is 0<br><b>alert</b>: type of alert. Default is 'info'. Enumeration value: {'info' | 'warning' | 'danger'}<br><b>url</b>: link. Default is '/'<br><b>msg</b>: The text to show. Default is the field name.<br><b>target</b>: Enumeration value: {'computer' | 'server'}",
                verbose_name='code'
            ),
        ),
        migrations.AlterField(
            model_name='pms',
            name='createrepo',
            field=models.TextField(
                blank=True,
                help_text='Bash code. Define how create the metadata of repositories in the migasfree server.',
                null=True, verbose_name='create repository'
            ),
        ),
        migrations.AlterField(
            model_name='pms',
            name='info',
            field=models.TextField(
                blank=True, help_text='Bash code. Define how get info of packages in the server',
                null=True, verbose_name='package information'
            ),
        ),
        migrations.AlterUniqueTogether(
            name='login',
            unique_together=set([]),
        ),
        migrations.RemoveField(
            model_name='login',
            name='attributes',
        ),
        migrations.RemoveField(
            model_name='login',
            name='computer',
        ),
        migrations.RemoveField(
            model_name='login',
            name='user',
        ),
        migrations.DeleteModel(
            name='Login',
        ),
        migrations.RunSQL(
            [(
                "UPDATE server_query SET code=%s WHERE id=3;",
                [
                    "from migasfree.server.models import Computer, Property, Version\nfrom django.db.models import Count\nquery = query = Computer.productive.select_related('sync_user').all()\nif parameters['value'] != '':\n    if str(parameters['exact']) == 'True':\n        query = query.filter(sync_attributes__property_att__id=parameters['property_att'], sync_attributes__value=parameters['value'])\n        fld = 'sync_attributes.filter(property_att__id=parameters[\"property_att\"], value=parameters[\"value\"]).values_list(\"value\", flat=True)'\n    else:\n        query = query.filter(sync_attributes__property_att__id=parameters['property_att'], sync_attributes__value__contains=parameters['value'])\n        fld = 'sync_attributes.filter(property_att__id=parameters[\"property_att\"], value__contains=parameters[\"value\"]).values_list(\"value\", flat=True)'\n    if parameters['version']:\n        query = query.select_related('version').filter(version__id=parameters['version'])\nquery = query.annotate(n=Count('id'))\nproperty = Property.objects.get(pk=parameters['property_att'])\nfields = ('link', fld, 'version', 'sync_user.link', 'sync_start_date')\ntitles = ('computer', property.name.lower(), 'version', 'sync user', 'date of login')"
                ]
            )],
            [(
                "UPDATE server_query SET code=%s WHERE id=3;",
                [
                    "from migasfree.server.models import Login, Computer, Property,Version\nfrom django.db.models import Count\nquery = Login.objects.select_related('user', 'computer').filter(computer__status__in=Computer.PRODUCTIVE_STATUS)\nif parameters['value'] != '':\n    if str(parameters['exact']) == 'True':\n        query = query.filter(attributes__property_att__id=parameters['property_att'],attributes__value=parameters['value'])\n        fld = 'attributes.filter(property_att__id=parameters[\"property_att\"],value=parameters[\"value\"]).values_list(\"value\",flat=True)'\n    else:\n        query = query.filter(attributes__property_att__id=parameters['property_att'],attributes__value__contains=parameters['value'])\n        fld = 'attributes.filter(property_att__id=parameters[\"property_att\"],value__contains=parameters[\"value\"]).values_list(\"value\",flat=True)'\n    if parameters['version']:\n        query = query.select_related('computer__version').filter(computer__version__id=parameters['version'])\nquery = query.annotate(n=Count('computer'))\nproperty = Property.objects.get(pk=parameters['property_att'])\nfields = ('computer.link', fld, 'computer.version', 'user.link', 'date')\ntitles = ('computer', property.name.lower(), 'version', 'user',  'date of login')"
                ]
            )]
        ),
        migrations.RunSQL(
            [(
                "UPDATE server_query SET code=%s WHERE id=4;",
                [
                    "from migasfree.server.models import Computer\nquery = Computer.productive.select_related('version').filter(software_inventory__contains=parameters['package']).order_by('sync_end_date')\nfields = ('link', 'version.link', 'sync_end_date', 'product')\ntitles = ('Computer', 'Version', 'Last Update', 'Product')"
                ]
            )],
            [(
                "UPDATE server_query SET code=%s WHERE id=4;",
                [
                    "from migasfree.server.models import Computer\nquery = Computer.productives.select_related('version').filter(software__contains=parameters['package']).order_by('datelastupdate')\nfields = ('link', 'version.link', 'datelastupdate', 'product')\ntitles = ('Computer', 'Version', 'Last Update', 'Product')"
                ]
            )]
        ),
        migrations.RunSQL(
            [(
                "UPDATE server_query SET code=%s WHERE id=7;",
                [
                    "from django.utils.translation import ugettext_lazy as _\nfrom datetime import datetime, timedelta, date\nfrom migasfree.server.models import Computer\nlast_days = parameters['last_days']\nif last_days <= 0 or last_days == '':\n    last_days = 1\nelse:\n    last_days = int(last_days)\ndelta = timedelta(days=1)\nn = date.today() - ((last_days - 1) * delta)\nquery = Computer.productive.select_related('version').filter(created_at__gte=n, created_at__lt=date.today() + delta).order_by('-created_at')\nfields = ('link', 'version', 'created_at', 'ip_address')\ntitles = (_('Computer'), _('Version'), _('Date Input'), _('IP'))"
                ]
            )],
            [(
                "UPDATE server_query SET code=%s WHERE id=7;",
                [
                    "from django.utils.translation import ugettext_lazy as _\nfrom datetime import datetime, timedelta, date\nfrom migasfree.server.models import Computer\nlast_days = parameters['last_days']\nif last_days <= 0 or last_days == '':\n    last_days = 1\nelse:\n    last_days = int(last_days)\ndelta = timedelta(days=1)\nn = date.today() - ((last_days - 1) * delta)\nquery = Computer.productives.select_related('version').filter(dateinput__gte=n, dateinput__lt=date.today() + delta).order_by('-dateinput')\nfields = ('link', 'version', 'dateinput', 'ip')\ntitles = (_('Computer'), _('Version'), _('date input'), _('ip'))"
                ]
            )]
        ),
        migrations.RunSQL(
            migrations.RunSQL.noop,
            reverse_sql='SET CONSTRAINTS ALL IMMEDIATE'
        ),
    ]
